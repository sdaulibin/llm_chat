@Library("bqdlib") _

//import
def getcode = new org.devops.GetCode()
def builds = new org.devops.Builds()
def mysonar = new org.devops.Sonar()
def mynexus = new org.devops.Nexus()
def gitlab = new org.devops.Gitlab()
def sat = new org.devops.Sat()
def qax = new org.devops.QaxCodeScan()
def helm = new org.devops.Helmcd()
def jj = new org.devops.Jenkins()
def cc = new org.devops.Creditcard()


pipeline {


    agent {
        node {
            label "star"
            customWorkspace "/home/jenkins/workspace/${env.JOB_NAME}_${env.BUILD_NUMBER}"
        }
    }

    options{
        skipDefaultCheckout true
        disableConcurrentBuilds()
    }

    // 构建参数
    parameters {
        choice(choices: ['JDK8','JDK11'], description: 'JDK版本', name: 'javaVersion')
        string(name: 'srcUrl', defaultValue: 'http://gitlab.qdccb.cn/star/star_llm_chat.git', description: 'Git repository URL')
        string(name: 'projectName', defaultValue: 'sllc', description: 'project name')
        string(name: 'groupName', defaultValue: 'star', description: 'Git group name, Need full path include sub group')
        string(name: 'scmUrl', defaultValue: 'gitlab.qdb.com', description: 'Git URL')
        string(name: 'gitlabTokenByUserPassword', defaultValue: '', description: 'gitlab credential by lvchentao username and password')
        string(name: 'HARBOR_URL', defaultValue: 'harbor.devops.qdb.com', description: 'harbor url')
        string(name: 'HARBOR_PROJECT', defaultValue: 'star', description: 'harbor project name')
        choice(choices: ['false', 'true'], description: '是否指定机器部署', name: 'SPECIFY_NODE')
        string(name: 'DESTINATION_KEY', defaultValue: "qdccb\\.cn/role", description: '要部署的目标机器')
        string(name: 'DESTINATION_VALUE', defaultValue: 'star', description: '要部署的目标机器')
        string(name: 'HELM_NS', defaultValue: 'star-sit', description: 'k8s namespace')
        string(name: 'ftpCredential', defaultValue: 'devops-test-ftp-credential', description: 'ftp credential')
        string(name: 'ftpPath', defaultValue: '', description: 'a ftp relative path')
        string(name: 'ftpAddr', defaultValue: '', description: 'ftp ip address')
        string(name: 'ingress', defaultValue: 'nginx', description: 'ingress class name')
        string(name: 'replicas', defaultValue: '1', description: 'replica count')
        string(name: 'ingressHost', defaultValue: 'sllc-sit.devops.qdb.com', description: 'ingress host')
        string(name: 'NPM_REGISTRY', defaultValue: 'http://10.238.145.145:4873/', description: 'npm registry proxy')
    }
    stages {

        stage("Init"){
            steps{
                script{
                    builds.InitSteps()
                }
            }
        }

        stage('Get sit Branches') {
            steps {
                script {
                    getcode.GetCode("master", "${params.srcUrl}", env.gitlabTokenByUserPassword)
                    getcode.GetCode("master", "${params.srcUrl}", env.gitlabTokenByUserPassword)
                }
            }
        }

        stage("Get Gitlab Info") {
            steps {
                script {
                    gitlab.GetBranchCommitID("master")
                    echo sh(script: 'env', returnStdout: true)
                }
            }
        }


        stage('Build Docker Image with nerdctl') {
            steps {
                script {
                    sh """
                    export DOCKER_CONFIG="/kaniko/.docker/"
                    export RELEASE_REGISTRY=${env.HARBOR_URL}/${env.HARBOR_PROJECT}
                    export RELEASE_VERSION=${env.GITLAB_COMMIT_ID}
                    export RELEASE_IMAGE=\${RELEASE_REGISTRY}/${env.projectName}:\${RELEASE_VERSION}
                    export NPM_REGISTRY=${env.NPM_REGISTRY}
                    make -e  release-image.amd64
                    nerdctl --insecure-registry=true push \${RELEASE_IMAGE}-amd64
                    """
                }
            }
        }

        stage('Helm Deploy Application') {
            steps {
                script {
                    def node_selected = env.SPECIFY_NODE
                    if(node_selected == 'true') {
                        sh """
                           export DOCKER_CONFIG="/kaniko/.docker/"
                           helm upgrade --install ${env.projectName} \
                           deploy/charts --namespace ${env.HELM_NS} --create-namespace \
                           -f deploy/charts/values.yaml --set nodeSelector."${env.DESTINATION_KEY}"="${env.DESTINATION_VALUE}" \
                           --set image.repository=${env.HARBOR_URL}/${env.HARBOR_PROJECT}/${env.projectName} \
                           --set ingress.className=${env.ingress} \
                           --set image.tag=${env.GITLAB_COMMIT_ID}-amd64 \
                           --set ingress.hosts[0].host=${env.ingressHost} \
                           --set replicaCount=${env.replicas} \
                        """
                    } else {
                        sh """
                           helm upgrade --install ${env.projectName} \
                           deploy/charts --namespace ${env.HELM_NS} --create-namespace \
                           -f deploy/charts/values.yaml \
                           --set image.repository=${env.HARBOR_URL}/${env.HARBOR_PROJECT}/${env.projectName} \
                           --set image.tag=${env.GITLAB_COMMIT_ID}-amd64 \
                           --set ingress.className=${env.ingress} \
                           --set ingress.hosts[0].host=${env.ingressHost} \
                           --set replicaCount=${env.replicas} \
                        """
                    }
                    sh """
                        helm get manifest --namespace ${env.HELM_NS} ${env.projectName}
                    """
                }
            }
        }
    }

    post {
        always {
            script {
                // 清理特定工作目录
                cleanWs()
            }
        }
    }

}
